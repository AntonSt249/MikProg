
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005814  08005814  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800581c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000088  080058a4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  080058a4  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015179  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002673  00000000  00000000  00035231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000378a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022008  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a7  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d205e  00000000  00000000  000713d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00143488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005758 	.word	0x08005758

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	08005758 	.word	0x08005758

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <RxTx_I2C>:
/* USER CODE BEGIN 0 */

/*
 * Get Value from HT221 at addr into store
 */
void RxTx_I2C(uint8_t* addr, uint8_t* store) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	// Set internal HT221 pointer to the required address
	HAL_I2C_Master_Transmit(&hi2c1, HT221_write, addr, 1, 1000);
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <RxTx_I2C+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b299      	uxth	r1, r3
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <RxTx_I2C+0x44>)
 80005f0:	f001 fb5a 	bl	8001ca8 <HAL_I2C_Master_Transmit>
	// Receive value
	HAL_I2C_Master_Receive(&hi2c1, HT221_read, store, 1, 1000);
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <RxTx_I2C+0x48>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b299      	uxth	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <RxTx_I2C+0x44>)
 8000606:	f001 fc4d 	bl	8001ea4 <HAL_I2C_Master_Receive>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	200000a4 	.word	0x200000a4
 800061c:	20000001 	.word	0x20000001

08000620 <CalibrateSensor>:

/*
 * Get calibration values and calculate the conversion ratios
 */
void CalibrateSensor() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af02      	add	r7, sp, #8
	// Enable the sensors and set the measurement frequency to 1 Hz
	HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &sensor_on, 2, 1000);
 8000626:	4b65      	ldr	r3, [pc, #404]	; (80007bc <CalibrateSensor+0x19c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b299      	uxth	r1, r3
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	4a62      	ldr	r2, [pc, #392]	; (80007c0 <CalibrateSensor+0x1a0>)
 8000636:	4863      	ldr	r0, [pc, #396]	; (80007c4 <CalibrateSensor+0x1a4>)
 8000638:	f001 fb36 	bl	8001ca8 <HAL_I2C_Master_Transmit>

	// Get deg
	//T0 low
	RxTx_I2C(&T0_deg_ad_l, &T0_deg_l);
 800063c:	4962      	ldr	r1, [pc, #392]	; (80007c8 <CalibrateSensor+0x1a8>)
 800063e:	4863      	ldr	r0, [pc, #396]	; (80007cc <CalibrateSensor+0x1ac>)
 8000640:	f7ff ffc8 	bl	80005d4 <RxTx_I2C>

	// T1 low
	RxTx_I2C(&T1_deg_ad_l, &T1_deg_l);
 8000644:	4962      	ldr	r1, [pc, #392]	; (80007d0 <CalibrateSensor+0x1b0>)
 8000646:	4863      	ldr	r0, [pc, #396]	; (80007d4 <CalibrateSensor+0x1b4>)
 8000648:	f7ff ffc4 	bl	80005d4 <RxTx_I2C>

	// deg_h
	RxTx_I2C(&deg_ad_h, &deg_h);
 800064c:	4962      	ldr	r1, [pc, #392]	; (80007d8 <CalibrateSensor+0x1b8>)
 800064e:	4863      	ldr	r0, [pc, #396]	; (80007dc <CalibrateSensor+0x1bc>)
 8000650:	f7ff ffc0 	bl	80005d4 <RxTx_I2C>

	T0_deg_h = deg_h & 0x03;
 8000654:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <CalibrateSensor+0x1b8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <CalibrateSensor+0x1c0>)
 8000660:	701a      	strb	r2, [r3, #0]
	T1_deg_h = deg_h & 0x0C;
 8000662:	4b5d      	ldr	r3, [pc, #372]	; (80007d8 <CalibrateSensor+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f003 030c 	and.w	r3, r3, #12
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b5d      	ldr	r3, [pc, #372]	; (80007e4 <CalibrateSensor+0x1c4>)
 800066e:	701a      	strb	r2, [r3, #0]

	T0_deg = ((T0_deg_h << 8) | T0_deg_l) / 8;
 8000670:	4b5b      	ldr	r3, [pc, #364]	; (80007e0 <CalibrateSensor+0x1c0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	4a54      	ldr	r2, [pc, #336]	; (80007c8 <CalibrateSensor+0x1a8>)
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	4313      	orrs	r3, r2
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <CalibrateSensor+0x62>
 8000680:	3307      	adds	r3, #7
 8000682:	10db      	asrs	r3, r3, #3
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <CalibrateSensor+0x1c8>)
 8000688:	801a      	strh	r2, [r3, #0]
	T1_deg = ((T1_deg_h << 6) | T1_deg_l) / 8;
 800068a:	4b56      	ldr	r3, [pc, #344]	; (80007e4 <CalibrateSensor+0x1c4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	019b      	lsls	r3, r3, #6
 8000690:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <CalibrateSensor+0x1b0>)
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	4313      	orrs	r3, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	da00      	bge.n	800069c <CalibrateSensor+0x7c>
 800069a:	3307      	adds	r3, #7
 800069c:	10db      	asrs	r3, r3, #3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <CalibrateSensor+0x1cc>)
 80006a2:	801a      	strh	r2, [r3, #0]

	// Get T0 and T1 Value
	RxTx_I2C(&T0_val_ad_l, &T0_val_l);
 80006a4:	4952      	ldr	r1, [pc, #328]	; (80007f0 <CalibrateSensor+0x1d0>)
 80006a6:	4853      	ldr	r0, [pc, #332]	; (80007f4 <CalibrateSensor+0x1d4>)
 80006a8:	f7ff ff94 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&T0_val_ad_h, &T0_val_h);
 80006ac:	4952      	ldr	r1, [pc, #328]	; (80007f8 <CalibrateSensor+0x1d8>)
 80006ae:	4853      	ldr	r0, [pc, #332]	; (80007fc <CalibrateSensor+0x1dc>)
 80006b0:	f7ff ff90 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&T1_val_ad_l, &T1_val_l);
 80006b4:	4952      	ldr	r1, [pc, #328]	; (8000800 <CalibrateSensor+0x1e0>)
 80006b6:	4853      	ldr	r0, [pc, #332]	; (8000804 <CalibrateSensor+0x1e4>)
 80006b8:	f7ff ff8c 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&T1_val_ad_h, &T1_val_h);
 80006bc:	4952      	ldr	r1, [pc, #328]	; (8000808 <CalibrateSensor+0x1e8>)
 80006be:	4853      	ldr	r0, [pc, #332]	; (800080c <CalibrateSensor+0x1ec>)
 80006c0:	f7ff ff88 	bl	80005d4 <RxTx_I2C>

	T0_val = (T0_val_h << 8) | T0_deg_l;
 80006c4:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <CalibrateSensor+0x1d8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <CalibrateSensor+0x1a8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <CalibrateSensor+0x1f0>)
 80006da:	801a      	strh	r2, [r3, #0]
	T1_val = (T1_val_h << 8) | T1_deg_l;
 80006dc:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <CalibrateSensor+0x1e8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <CalibrateSensor+0x1b0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <CalibrateSensor+0x1f4>)
 80006f2:	801a      	strh	r2, [r3, #0]

	// Calculate the conversion ratio
	counts_per_deg = (T1_val - T0_val) / (T1_deg - T0_deg);
 80006f4:	4b47      	ldr	r3, [pc, #284]	; (8000814 <CalibrateSensor+0x1f4>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <CalibrateSensor+0x1f0>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <CalibrateSensor+0x1cc>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <CalibrateSensor+0x1c8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	1acb      	subs	r3, r1, r3
 800070c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b41      	ldr	r3, [pc, #260]	; (8000818 <CalibrateSensor+0x1f8>)
 8000714:	801a      	strh	r2, [r3, #0]

	// -----------------------------------------------------------------------------------------------------------------
	// Get deg
	//T0 low
	RxTx_I2C(&H0_deg_ad_l, &H0_deg_l);
 8000716:	4941      	ldr	r1, [pc, #260]	; (800081c <CalibrateSensor+0x1fc>)
 8000718:	4841      	ldr	r0, [pc, #260]	; (8000820 <CalibrateSensor+0x200>)
 800071a:	f7ff ff5b 	bl	80005d4 <RxTx_I2C>
	// T1 low

	RxTx_I2C(&H1_deg_ad_l, &H1_deg_l);
 800071e:	4941      	ldr	r1, [pc, #260]	; (8000824 <CalibrateSensor+0x204>)
 8000720:	4841      	ldr	r0, [pc, #260]	; (8000828 <CalibrateSensor+0x208>)
 8000722:	f7ff ff57 	bl	80005d4 <RxTx_I2C>
	// deg_h
	H0_deg = (H0_deg_l) / 2;
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <CalibrateSensor+0x1fc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	085b      	lsrs	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b3e      	ldr	r3, [pc, #248]	; (800082c <CalibrateSensor+0x20c>)
 8000732:	801a      	strh	r2, [r3, #0]
	H1_deg = (H1_deg_l) / 2;
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <CalibrateSensor+0x204>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	085b      	lsrs	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <CalibrateSensor+0x210>)
 8000740:	801a      	strh	r2, [r3, #0]

	// Get T0 and T1 Value
	RxTx_I2C(&H0_val_ad_l, &H0_val_l);
 8000742:	493c      	ldr	r1, [pc, #240]	; (8000834 <CalibrateSensor+0x214>)
 8000744:	483c      	ldr	r0, [pc, #240]	; (8000838 <CalibrateSensor+0x218>)
 8000746:	f7ff ff45 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&H0_val_ad_h, &H0_val_h);
 800074a:	493c      	ldr	r1, [pc, #240]	; (800083c <CalibrateSensor+0x21c>)
 800074c:	483c      	ldr	r0, [pc, #240]	; (8000840 <CalibrateSensor+0x220>)
 800074e:	f7ff ff41 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&H1_val_ad_l, &H1_val_l);
 8000752:	493c      	ldr	r1, [pc, #240]	; (8000844 <CalibrateSensor+0x224>)
 8000754:	483c      	ldr	r0, [pc, #240]	; (8000848 <CalibrateSensor+0x228>)
 8000756:	f7ff ff3d 	bl	80005d4 <RxTx_I2C>
	RxTx_I2C(&H1_val_ad_h, &H1_val_h);
 800075a:	493c      	ldr	r1, [pc, #240]	; (800084c <CalibrateSensor+0x22c>)
 800075c:	483c      	ldr	r0, [pc, #240]	; (8000850 <CalibrateSensor+0x230>)
 800075e:	f7ff ff39 	bl	80005d4 <RxTx_I2C>
	H0_val = (H0_val_h << 8) | H0_deg_l;
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <CalibrateSensor+0x21c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <CalibrateSensor+0x1fc>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <CalibrateSensor+0x234>)
 8000778:	801a      	strh	r2, [r3, #0]
	H1_val = (H1_val_h << 8) | H1_deg_l;
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <CalibrateSensor+0x22c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <CalibrateSensor+0x204>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b21b      	sxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b21b      	sxth	r3, r3
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <CalibrateSensor+0x238>)
 8000790:	801a      	strh	r2, [r3, #0]

	// Calculate the conversion ratio
	H_counts_per_deg = (H1_val - H0_val) / (H1_deg - H0_deg);
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <CalibrateSensor+0x238>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <CalibrateSensor+0x234>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1ad2      	subs	r2, r2, r3
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <CalibrateSensor+0x210>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <CalibrateSensor+0x20c>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	1acb      	subs	r3, r1, r3
 80007aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <CalibrateSensor+0x23c>)
 80007b2:	801a      	strh	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	200000a4 	.word	0x200000a4
 80007c8:	20000780 	.word	0x20000780
 80007cc:	20000006 	.word	0x20000006
 80007d0:	20000781 	.word	0x20000781
 80007d4:	20000007 	.word	0x20000007
 80007d8:	20000786 	.word	0x20000786
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000787 	.word	0x20000787
 80007e4:	20000788 	.word	0x20000788
 80007e8:	20000782 	.word	0x20000782
 80007ec:	20000784 	.word	0x20000784
 80007f0:	20000789 	.word	0x20000789
 80007f4:	20000009 	.word	0x20000009
 80007f8:	2000078a 	.word	0x2000078a
 80007fc:	2000000a 	.word	0x2000000a
 8000800:	2000078b 	.word	0x2000078b
 8000804:	2000000b 	.word	0x2000000b
 8000808:	2000078c 	.word	0x2000078c
 800080c:	2000000c 	.word	0x2000000c
 8000810:	2000078e 	.word	0x2000078e
 8000814:	20000790 	.word	0x20000790
 8000818:	20000792 	.word	0x20000792
 800081c:	20000794 	.word	0x20000794
 8000820:	2000000d 	.word	0x2000000d
 8000824:	20000795 	.word	0x20000795
 8000828:	2000000e 	.word	0x2000000e
 800082c:	20000796 	.word	0x20000796
 8000830:	20000798 	.word	0x20000798
 8000834:	2000079a 	.word	0x2000079a
 8000838:	2000000f 	.word	0x2000000f
 800083c:	2000079b 	.word	0x2000079b
 8000840:	20000010 	.word	0x20000010
 8000844:	2000079c 	.word	0x2000079c
 8000848:	20000011 	.word	0x20000011
 800084c:	2000079d 	.word	0x2000079d
 8000850:	20000012 	.word	0x20000012
 8000854:	2000079e 	.word	0x2000079e
 8000858:	200007a0 	.word	0x200007a0
 800085c:	200007a2 	.word	0x200007a2

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fd86 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f81c 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f000 f9a4 	bl	8000bb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000870:	f000 f948 	bl	8000b04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000874:	f000 f970 	bl	8000b58 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000878:	f000 f880 	bl	800097c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800087c:	f000 f918 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000880:	f000 f8aa 	bl	80009d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000884:	f000 f8de 	bl	8000a44 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // init
  // start
  CalibrateSensor();
 8000888:	f7ff feca 	bl	8000620 <CalibrateSensor>
  HAL_TIM_Base_Start_IT(&htim6);
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <main+0x3c>)
 800088e:	f003 f925 	bl	8003adc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <main+0x40>)
 8000894:	f003 f922 	bl	8003adc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x38>
 800089a:	bf00      	nop
 800089c:	200000f8 	.word	0x200000f8
 80008a0:	20000140 	.word	0x20000140

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	; 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fada 	bl	8004e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemClock_Config+0xd0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <SystemClock_Config+0xd0>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemClock_Config+0xd0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <SystemClock_Config+0xd4>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <SystemClock_Config+0xd4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000904:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000908:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000914:	2308      	movs	r3, #8
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000918:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800091c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800091e:	2304      	movs	r3, #4
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000922:	2308      	movs	r3, #8
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fe00 	bl	8003534 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800093a:	f000 fac5 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2103      	movs	r1, #3
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f93e 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000966:	f000 faaf 	bl	8000ec8 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_I2C1_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x50>)
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_I2C1_Init+0x58>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_I2C1_Init+0x50>)
 800099a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_I2C1_Init+0x50>)
 80009ba:	f001 f831 	bl	8001a20 <HAL_I2C_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c4:	f000 fa80 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000a4 	.word	0x200000a4
 80009d0:	40005400 	.word	0x40005400
 80009d4:	00061a80 	.word	0x00061a80

080009d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM6_Init+0x64>)
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_TIM6_Init+0x68>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_TIM6_Init+0x64>)
 80009ee:	f242 527f 	movw	r2, #9599	; 0x257f
 80009f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_TIM6_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_TIM6_Init+0x64>)
 80009fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_TIM6_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM6_Init+0x64>)
 8000a0a:	f003 f817 	bl	8003a3c <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a14:	f000 fa58 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM6_Init+0x64>)
 8000a26:	f003 fa99 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 fa4a 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000f8 	.word	0x200000f8
 8000a40:	40001000 	.word	0x40001000

08000a44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_TIM7_Init+0x68>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9599;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a5a:	f242 527f 	movw	r2, #9599	; 0x257f
 8000a5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a68:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a76:	f002 ffe1 	bl	8003a3c <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a80:	f000 fa22 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_TIM7_Init+0x64>)
 8000a92:	f003 fa63 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a9c:	f000 fa14 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000140 	.word	0x20000140
 8000aac:	40001400 	.word	0x40001400

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f003 fac8 	bl	800407c <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f9e9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000188 	.word	0x20000188
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART3_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	f003 fa9e 	bl	800407c <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f9bf 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001cc 	.word	0x200001cc
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b66:	2206      	movs	r2, #6
 8000b68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba2:	f001 fed2 	bl	800294a <HAL_PCD_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 f98c 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000210 	.word	0x20000210

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a3d      	ldr	r2, [pc, #244]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c7c:	4822      	ldr	r0, [pc, #136]	; (8000d08 <MX_GPIO_Init+0x150>)
 8000c7e:	f000 feb5 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <MX_GPIO_Init+0x154>)
 8000c88:	f000 feb0 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000ca4:	f000 fd0e 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ca8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_GPIO_Init+0x150>)
 8000cc2:	f000 fcff 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_GPIO_Init+0x154>)
 8000cde:	f000 fcf1 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_GPIO_Init+0x154>)
 8000cf6:	f000 fce5 	bl	80016c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40021800 	.word	0x40021800
 8000d10:	40020800 	.word	0x40020800

08000d14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d135      	bne.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0x7c>
		// print in Terminal
		sprintf(msg, "Measurement: \r \n \n");
 8000d24:	494f      	ldr	r1, [pc, #316]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d26:	4850      	ldr	r0, [pc, #320]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d28:	f004 f8a8 	bl	8004e7c <siprintf>
		HAL_UART_Transmit(&huart3, &msg, strlen(msg), 1000);
 8000d2c:	484e      	ldr	r0, [pc, #312]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d2e:	f7ff fa77 	bl	8000220 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	494b      	ldr	r1, [pc, #300]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d3c:	484b      	ldr	r0, [pc, #300]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d3e:	f003 f9ea 	bl	8004116 <HAL_UART_Transmit>
		sprintf(msg, "Temperature: %d \r \n \n", tempInC);
 8000d42:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	494a      	ldr	r1, [pc, #296]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d4c:	4846      	ldr	r0, [pc, #280]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d4e:	f004 f895 	bl	8004e7c <siprintf>
		HAL_UART_Transmit(&huart3, &msg, strlen(msg), 1000);
 8000d52:	4845      	ldr	r0, [pc, #276]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d54:	f7ff fa64 	bl	8000220 <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d60:	4941      	ldr	r1, [pc, #260]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d62:	4842      	ldr	r0, [pc, #264]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d64:	f003 f9d7 	bl	8004116 <HAL_UART_Transmit>
		sprintf(msg, "Humidity: %d \r \n \n \n", humInC);
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4942      	ldr	r1, [pc, #264]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000d72:	483d      	ldr	r0, [pc, #244]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d74:	f004 f882 	bl	8004e7c <siprintf>
		HAL_UART_Transmit(&huart3, &msg, strlen(msg), 1000);
 8000d78:	483b      	ldr	r0, [pc, #236]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d7a:	f7ff fa51 	bl	8000220 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	4938      	ldr	r1, [pc, #224]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d88:	4838      	ldr	r0, [pc, #224]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d8a:	f003 f9c4 	bl	8004116 <HAL_UART_Transmit>
		// send with UART
		sprintf(msg, "t%3dh%3d", tempInC, humInC); //'txxxhxxx'
		HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
	}

}
 8000d8e:	e062      	b.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x142>
		RxTx_I2C(&tempLowAd, &tempLow);
 8000d90:	493b      	ldr	r1, [pc, #236]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d92:	483c      	ldr	r0, [pc, #240]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000d94:	f7ff fc1e 	bl	80005d4 <RxTx_I2C>
		RxTx_I2C(&tempHighAd, &tempHigh);
 8000d98:	493b      	ldr	r1, [pc, #236]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d9a:	483c      	ldr	r0, [pc, #240]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000d9c:	f7ff fc1a 	bl	80005d4 <RxTx_I2C>
		temp = (tempHigh << 8) | tempLow;
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000db4:	801a      	strh	r2, [r3, #0]
		tempInC = ((temp - T0_val) / counts_per_deg) + T0_deg;
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dda:	801a      	strh	r2, [r3, #0]
		RxTx_I2C(&humLowAd, &humLow);
 8000ddc:	4930      	ldr	r1, [pc, #192]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000dde:	4831      	ldr	r0, [pc, #196]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000de0:	f7ff fbf8 	bl	80005d4 <RxTx_I2C>
		RxTx_I2C(&humHighAd, &humHigh);
 8000de4:	4930      	ldr	r1, [pc, #192]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000de6:	4831      	ldr	r0, [pc, #196]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000de8:	f7ff fbf4 	bl	80005d4 <RxTx_I2C>
		hum = (humHigh << 8) | humLow;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e02:	801a      	strh	r2, [r3, #0]
		humInC = ((hum - H0_val) / H_counts_per_deg) + H0_deg;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e28:	801a      	strh	r2, [r3, #0]
		sprintf(msg, "t%3dh%3d", tempInC, humInC); //'txxxhxxx'
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	4921      	ldr	r1, [pc, #132]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e3c:	f004 f81e 	bl	8004e7c <siprintf>
		HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e42:	f7ff f9ed 	bl	8000220 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	4906      	ldr	r1, [pc, #24]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e52:	f003 f960 	bl	8004116 <HAL_UART_Transmit>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000f8 	.word	0x200000f8
 8000e64:	08005770 	.word	0x08005770
 8000e68:	2000071c 	.word	0x2000071c
 8000e6c:	200001cc 	.word	0x200001cc
 8000e70:	200007a8 	.word	0x200007a8
 8000e74:	08005784 	.word	0x08005784
 8000e78:	200007ae 	.word	0x200007ae
 8000e7c:	0800579c 	.word	0x0800579c
 8000e80:	200007a4 	.word	0x200007a4
 8000e84:	20000013 	.word	0x20000013
 8000e88:	200007a5 	.word	0x200007a5
 8000e8c:	20000014 	.word	0x20000014
 8000e90:	200007a6 	.word	0x200007a6
 8000e94:	2000078e 	.word	0x2000078e
 8000e98:	20000792 	.word	0x20000792
 8000e9c:	20000782 	.word	0x20000782
 8000ea0:	200007aa 	.word	0x200007aa
 8000ea4:	20000015 	.word	0x20000015
 8000ea8:	200007ab 	.word	0x200007ab
 8000eac:	20000016 	.word	0x20000016
 8000eb0:	200007ac 	.word	0x200007ac
 8000eb4:	2000079e 	.word	0x2000079e
 8000eb8:	200007a2 	.word	0x200007a2
 8000ebc:	20000796 	.word	0x20000796
 8000ec0:	080057b4 	.word	0x080057b4
 8000ec4:	20000188 	.word	0x20000188

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <HAL_I2C_MspInit+0x8c>)
 8000f80:	f000 fba0 	bl	80016c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_TIM_Base_MspInit+0x80>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d116      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	2036      	movs	r0, #54	; 0x36
 8000fe8:	f000 fb35 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fec:	2036      	movs	r0, #54	; 0x36
 8000fee:	f000 fb4e 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ff2:	e01a      	b.n	800102a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_TIM_Base_MspInit+0x88>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d115      	bne.n	800102a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_Base_MspInit+0x84>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	2037      	movs	r0, #55	; 0x37
 8001020:	f000 fb19 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001024:	2037      	movs	r0, #55	; 0x37
 8001026:	f000 fb32 	bl	800168e <HAL_NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40001000 	.word	0x40001000
 8001038:	40023800 	.word	0x40023800
 800103c:	40001400 	.word	0x40001400

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a32      	ldr	r2, [pc, #200]	; (8001128 <HAL_UART_MspInit+0xe8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_UART_MspInit+0xec>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_UART_MspInit+0xec>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_UART_MspInit+0xec>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_UART_MspInit+0xec>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_UART_MspInit+0xec>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_UART_MspInit+0xec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800109a:	2360      	movs	r3, #96	; 0x60
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <HAL_UART_MspInit+0xf0>)
 80010b6:	f000 fb05 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ba:	e031      	b.n	8001120 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0xec>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0xec>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0xec>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0xec>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_UART_MspInit+0xec>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_MspInit+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001110:	2307      	movs	r3, #7
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0xf0>)
 800111c:	f000 fad2 	bl	80016c4 <HAL_GPIO_Init>
}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40004800 	.word	0x40004800

08001138 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0a0      	sub	sp, #128	; 0x80
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2258      	movs	r2, #88	; 0x58
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fe87 	bl	8004e6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001166:	d14d      	bne.n	8001204 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001168:	2320      	movs	r3, #32
 800116a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800116c:	2300      	movs	r3, #0
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f001 ff51 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001180:	f7ff fea2 	bl	8000ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_PCD_MspInit+0xd4>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_PCD_MspInit+0xd4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_PCD_MspInit+0xd4>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b2:	230a      	movs	r3, #10
 80011b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ba:	4619      	mov	r1, r3
 80011bc:	4814      	ldr	r0, [pc, #80]	; (8001210 <HAL_PCD_MspInit+0xd8>)
 80011be:	f000 fa81 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d4:	4619      	mov	r1, r3
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_PCD_MspInit+0xd8>)
 80011d8:	f000 fa74 	bl	80016c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e6:	6353      	str	r3, [r2, #52]	; 0x34
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f6:	6453      	str	r3, [r2, #68]	; 0x44
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3780      	adds	r7, #128	; 0x80
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8da 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM6_DAC_IRQHandler+0x10>)
 800126e:	f002 fca5 	bl	8003bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000f8 	.word	0x200000f8

0800127c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <TIM7_IRQHandler+0x10>)
 8001282:	f002 fc9b 	bl	8003bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000140 	.word	0x20000140

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f003 fdaa 	bl	8004e18 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20050000 	.word	0x20050000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200007b0 	.word	0x200007b0
 80012f8:	200007c8 	.word	0x200007c8

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopFillZerobss+0x26>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffd7 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f003 fd69 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fa85 	bl	8000860 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001358:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001364:	0800581c 	.word	0x0800581c
  ldr r2, =_sbss
 8001368:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800136c:	200007c8 	.word	0x200007c8

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_Init+0x40>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_Init+0x40>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_Init+0x40>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f94f 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f808 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fd94 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f967 	bl	80016aa <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f4:	f000 f92f 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000018 	.word	0x20000018
 8001410:	20000020 	.word	0x20000020
 8001414:	2000001c 	.word	0x2000001c

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000020 	.word	0x20000020
 800143c:	200007b4 	.word	0x200007b4

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200007b4 	.word	0x200007b4

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000020 	.word	0x20000020

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff29 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff3e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff8e 	bl	8001594 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5d 	bl	8001540 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff31 	bl	8001504 <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e165      	b.n	80019ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8154 	bne.w	80019a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ae 	beq.w	80019a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_GPIO_Init+0x300>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a5c      	ldr	r2, [pc, #368]	; (80019c4 <HAL_GPIO_Init+0x300>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <HAL_GPIO_Init+0x300>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x308>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x21a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x216>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x310>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x212>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x314>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x318>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x20a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x31c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x206>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <HAL_GPIO_Init+0x320>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x202>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018de:	2300      	movs	r3, #0
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f0:	4935      	ldr	r1, [pc, #212]	; (80019c8 <HAL_GPIO_Init+0x304>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_GPIO_Init+0x324>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001922:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_GPIO_Init+0x324>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x324>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x324>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_GPIO_Init+0x324>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_GPIO_Init+0x324>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x324>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_GPIO_Init+0x324>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0f      	cmp	r3, #15
 80019b0:	f67f ae96 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40021400 	.word	0x40021400
 80019e4:	40021800 	.word	0x40021800
 80019e8:	40013c00 	.word	0x40013c00

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e12b      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fa6c 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a84:	f001 faa2 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d807      	bhi.n	8001aa4 <HAL_I2C_Init+0x84>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a80      	ldr	r2, [pc, #512]	; (8001c98 <HAL_I2C_Init+0x278>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x92>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a7d      	ldr	r2, [pc, #500]	; (8001c9c <HAL_I2C_Init+0x27c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0e7      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a78      	ldr	r2, [pc, #480]	; (8001ca0 <HAL_I2C_Init+0x280>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2C_Init+0xd4>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e009      	b.n	8001b08 <HAL_I2C_Init+0xe8>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a69      	ldr	r2, [pc, #420]	; (8001ca4 <HAL_I2C_Init+0x284>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	495c      	ldr	r1, [pc, #368]	; (8001c94 <HAL_I2C_Init+0x274>)
 8001b24:	428b      	cmp	r3, r1
 8001b26:	d819      	bhi.n	8001b5c <HAL_I2C_Init+0x13c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_I2C_Init+0x138>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e59      	subs	r1, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	e051      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e04f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <HAL_I2C_Init+0x168>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e012      	b.n	8001bae <HAL_I2C_Init+0x18e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x196>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e022      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <HAL_I2C_Init+0x1bc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1e58      	subs	r0, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bda:	e00f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6911      	ldr	r1, [r2, #16]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68d2      	ldr	r2, [r2, #12]
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	001e847f 	.word	0x001e847f
 8001c9c:	003d08ff 	.word	0x003d08ff
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fbc0 	bl	8001440 <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	f040 80e0 	bne.w	8001e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4970      	ldr	r1, [pc, #448]	; (8001e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fc58 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0d3      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x50>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0cc      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d007      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fac2 	bl	80022f0 <I2C_MasterRequestWrite>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08d      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d8c:	e066      	b.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fcd2 	bl	800273c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d017      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	6a39      	ldr	r1, [r7, #32]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fcc2 	bl	80027be <I2C_WaitOnBTFFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01a      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d194      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00100002 	.word	0x00100002
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff fac2 	bl	8001440 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	f040 820b 	bne.w	80022e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	497c      	ldr	r1, [pc, #496]	; (80020c8 <HAL_I2C_Master_Receive+0x224>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fb5a 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e1fe      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Master_Receive+0x50>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e1f7      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d007      	beq.n	8001f1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2222      	movs	r2, #34	; 0x22
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a5c      	ldr	r2, [pc, #368]	; (80020cc <HAL_I2C_Master_Receive+0x228>)
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fa46 	bl	80023f4 <I2C_MasterRequestRead>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1b8      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e18c      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d11b      	bne.n	8001fe2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e16c      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d11b      	bne.n	8002022 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	e14c      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002048:	e138      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	2b03      	cmp	r3, #3
 8002050:	f200 80f1 	bhi.w	8002236 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	2b01      	cmp	r3, #1
 800205a:	d123      	bne.n	80020a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fbed 	bl	8002840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e139      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020a2:	e10b      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d14e      	bne.n	800214a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	2200      	movs	r2, #0
 80020b4:	4906      	ldr	r1, [pc, #24]	; (80020d0 <HAL_I2C_Master_Receive+0x22c>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fa6a 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e10e      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
 80020c6:	bf00      	nop
 80020c8:	00100002 	.word	0x00100002
 80020cc:	ffff0000 	.word	0xffff0000
 80020d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002148:	e0b8      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	2200      	movs	r2, #0
 8002152:	4966      	ldr	r1, [pc, #408]	; (80022ec <HAL_I2C_Master_Receive+0x448>)
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa1b 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0bf      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	2200      	movs	r2, #0
 80021ae:	494f      	ldr	r1, [pc, #316]	; (80022ec <HAL_I2C_Master_Receive+0x448>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f9ed 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e091      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002234:	e042      	b.n	80022bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fb00 	bl	8002840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e04c      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d118      	bne.n	80022bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f aec2 	bne.w	800204a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	00010004 	.word	0x00010004

080022f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d006      	beq.n	800231a <I2C_MasterRequestWrite+0x2a>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d003      	beq.n	800231a <I2C_MasterRequestWrite+0x2a>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002318:	d108      	bne.n	800232c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e00b      	b.n	8002344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	2b12      	cmp	r3, #18
 8002332:	d107      	bne.n	8002344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f91d 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d103      	bne.n	8002374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e035      	b.n	80023e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002380:	d108      	bne.n	8002394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	e01b      	b.n	80023cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	11db      	asrs	r3, r3, #7
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f003 0306 	and.w	r3, r3, #6
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f063 030f 	orn	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <I2C_MasterRequestWrite+0xfc>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f943 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e010      	b.n	80023e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4907      	ldr	r1, [pc, #28]	; (80023f0 <I2C_MasterRequestWrite+0x100>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f933 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	00010008 	.word	0x00010008
 80023f0:	00010002 	.word	0x00010002

080023f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d006      	beq.n	800242e <I2C_MasterRequestRead+0x3a>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d003      	beq.n	800242e <I2C_MasterRequestRead+0x3a>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800242c:	d108      	bne.n	8002440 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e00b      	b.n	8002458 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	2b11      	cmp	r3, #17
 8002446:	d107      	bne.n	8002458 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f893 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247e:	d103      	bne.n	8002488 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e079      	b.n	8002580 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002494:	d108      	bne.n	80024a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	e05f      	b.n	8002568 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024a8:	897b      	ldrh	r3, [r7, #10]
 80024aa:	11db      	asrs	r3, r3, #7
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0306 	and.w	r3, r3, #6
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f063 030f 	orn	r3, r3, #15
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4930      	ldr	r1, [pc, #192]	; (8002588 <I2C_MasterRequestRead+0x194>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f8b9 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e054      	b.n	8002580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024d6:	897b      	ldrh	r3, [r7, #10]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4929      	ldr	r1, [pc, #164]	; (800258c <I2C_MasterRequestRead+0x198>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f8a9 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e044      	b.n	8002580 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f831 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	d103      	bne.n	800254c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e017      	b.n	8002580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002550:	897b      	ldrh	r3, [r7, #10]
 8002552:	11db      	asrs	r3, r3, #7
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0306 	and.w	r3, r3, #6
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f063 030e 	orn	r3, r3, #14
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <I2C_MasterRequestRead+0x198>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f865 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00010008 	.word	0x00010008
 800258c:	00010002 	.word	0x00010002

08002590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a0:	e025      	b.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a8:	d021      	beq.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe ff49 	bl	8001440 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e023      	b.n	8002636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10d      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	e00c      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	429a      	cmp	r2, r3
 8002632:	d0b6      	beq.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264c:	e051      	b.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d123      	bne.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e046      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d021      	beq.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fec7 	bl	8001440 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e020      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10c      	bne.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	e00b      	b.n	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d18d      	bne.n	800264e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002748:	e02d      	b.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f8ce 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02d      	b.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002760:	d021      	beq.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7fe fe6d 	bl	8001440 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d1ca      	bne.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ca:	e02d      	b.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f88d 	bl	80028ec <I2C_IsAcknowledgeFailed>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e02d      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e2:	d021      	beq.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e4:	f7fe fe2c 	bl	8001440 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e007      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d1ca      	bne.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800284c:	e042      	b.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b10      	cmp	r3, #16
 800285a:	d119      	bne.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0210 	mvn.w	r2, #16
 8002864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e029      	b.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7fe fdd6 	bl	8001440 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d1b5      	bne.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d11b      	bne.n	800293c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294c:	b08f      	sub	sp, #60	; 0x3c
 800294e:	af0a      	add	r7, sp, #40	; 0x28
 8002950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e116      	b.n	8002b8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fbde 	bl	8001138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f001 ffa1 	bl	80048e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80029be:	1d33      	adds	r3, r6, #4
 80029c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f001 ff2c 	bl	8004820 <USB_CoreInit>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0d7      	b.n	8002b8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 ff8f 	bl	8004904 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e04a      	b.n	8002a82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	333d      	adds	r3, #61	; 0x3d
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	333c      	adds	r3, #60	; 0x3c
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3344      	adds	r3, #68	; 0x44
 8002a28:	4602      	mov	r2, r0
 8002a2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3340      	adds	r3, #64	; 0x40
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3348      	adds	r3, #72	; 0x48
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334c      	adds	r3, #76	; 0x4c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3354      	adds	r3, #84	; 0x54
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3af      	bcc.n	80029ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e044      	b.n	8002b1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3b5      	bcc.n	8002a92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	687e      	ldr	r6, [r7, #4]
 8002b2e:	466d      	mov	r5, sp
 8002b30:	f106 0410 	add.w	r4, r6, #16
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b44:	1d33      	adds	r3, r6, #4
 8002b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b48:	6838      	ldr	r0, [r7, #0]
 8002b4a:	f001 ff27 	bl	800499c <USB_DevInit>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e014      	b.n	8002b8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f80a 	bl	8002b92 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 f8e5 	bl	8004d52 <USB_DevDisconnect>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b92 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	f043 0303 	orr.w	r3, r3, #3
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0cc      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d90c      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b8      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	494d      	ldr	r1, [pc, #308]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d044      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d119      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e067      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4934      	ldr	r1, [pc, #208]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fbb8 	bl	8001440 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fbb4 	bl	8001440 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e04f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d20c      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e032      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4916      	ldr	r1, [pc, #88]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d62:	f000 f821 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fb18 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023c00 	.word	0x40023c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	080057c0 	.word	0x080057c0
 8002da0:	20000018 	.word	0x20000018
 8002da4:	2000001c 	.word	0x2000001c

08002da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b094      	sub	sp, #80	; 0x50
 8002dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
 8002db4:	2300      	movs	r3, #0
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	2300      	movs	r3, #0
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc0:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d00d      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	f200 80e1 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x34>
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dda:	e0db      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_GetSysClockFreq+0x204>)
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002de0:	e0db      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de2:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002de4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de6:	e0d8      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de8:	4b6f      	ldr	r3, [pc, #444]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	2200      	movs	r2, #0
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
 8002e16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4621      	mov	r1, r4
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	6139      	str	r1, [r7, #16]
 8002e38:	4629      	mov	r1, r5
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4651      	mov	r1, sl
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4651      	mov	r1, sl
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e60:	4659      	mov	r1, fp
 8002e62:	eb63 0901 	sbc.w	r9, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7a:	4690      	mov	r8, r2
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb18 0303 	adds.w	r3, r8, r3
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	462b      	mov	r3, r5
 8002e88:	eb49 0303 	adc.w	r3, r9, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	024b      	lsls	r3, r1, #9
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	024a      	lsls	r2, r1, #9
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eae:	2200      	movs	r2, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eb8:	f7fd fa0a 	bl	80002d0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec4:	e058      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0159      	lsls	r1, r3, #5
 8002eee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef2:	0150      	lsls	r0, r2, #5
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002efe:	4649      	mov	r1, r9
 8002f00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f18:	ebb2 040a 	subs.w	r4, r2, sl
 8002f1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00eb      	lsls	r3, r5, #3
 8002f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2e:	00e2      	lsls	r2, r4, #3
 8002f30:	4614      	mov	r4, r2
 8002f32:	461d      	mov	r5, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	18e3      	adds	r3, r4, r3
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	eb45 0303 	adc.w	r3, r5, r3
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	028b      	lsls	r3, r1, #10
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f58:	4621      	mov	r1, r4
 8002f5a:	028a      	lsls	r2, r1, #10
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f62:	2200      	movs	r2, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	61fa      	str	r2, [r7, #28]
 8002f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6c:	f7fd f9b0 	bl	80002d0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetSysClockFreq+0x204>)
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3750      	adds	r7, #80	; 0x50
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000018 	.word	0x20000018

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080057d0 	.word	0x080057d0

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff8:	f7ff ffdc 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0b5b      	lsrs	r3, r3, #13
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	080057d0 	.word	0x080057d0

0800301c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003040:	4b7a      	ldr	r3, [pc, #488]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003046:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4977      	ldr	r1, [pc, #476]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003074:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	496b      	ldr	r1, [pc, #428]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d022      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 800309c:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800309e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	4960      	ldr	r1, [pc, #384]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4954      	ldr	r1, [pc, #336]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d022      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80030ee:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	494b      	ldr	r1, [pc, #300]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800310c:	2301      	movs	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	3b01      	subs	r3, #1
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	493f      	ldr	r1, [pc, #252]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 808a 	beq.w	8003256 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a38      	ldr	r2, [pc, #224]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a33      	ldr	r2, [pc, #204]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800316a:	f7fe f969 	bl	8001440 <HAL_GetTick>
 800316e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7fe f965 	bl	8001440 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1d1      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003198:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d114      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe f933 	bl	8001440 <HAL_GetTick>
 80031da:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f92f 	bl	8001440 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e199      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320c:	d114      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800321e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003222:	4902      	ldr	r1, [pc, #8]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]
 8003228:	e00c      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
 8003234:	42470e40 	.word	0x42470e40
 8003238:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a88      	ldr	r2, [pc, #544]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800323e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	4b86      	ldr	r3, [pc, #536]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	4983      	ldr	r1, [pc, #524]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003252:	4313      	orrs	r3, r2
 8003254:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003268:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800326a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003278:	4b79      	ldr	r3, [pc, #484]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	4976      	ldr	r1, [pc, #472]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800329a:	4b71      	ldr	r3, [pc, #452]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800329c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	496d      	ldr	r1, [pc, #436]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b8:	d101      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	4961      	ldr	r1, [pc, #388]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d004      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	f040 80c6 	bne.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032f0:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f6:	f7fe f8a3 	bl	8001440 <HAL_GetTick>
 80032fa:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032fe:	f7fe f89f 	bl	8001440 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e10b      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800331c:	4a53      	ldr	r2, [pc, #332]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d023      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d019      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003360:	d00e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800336a:	2b00      	cmp	r3, #0
 800336c:	d019      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337e:	d110      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4931      	ldr	r1, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d026      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d122      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d0:	0e1b      	lsrs	r3, r3, #24
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	071b      	lsls	r3, r3, #28
 80033f0:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fe:	f023 021f 	bic.w	r2, r3, #31
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	3b01      	subs	r3, #1
 8003408:	4915      	ldr	r1, [pc, #84]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	071b      	lsls	r3, r3, #28
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003444:	f7fd fffc 	bl	8001440 <HAL_GetTick>
 8003448:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800344c:	f7fd fff8 	bl	8001440 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d90a      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e064      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	424711e0 	.word	0x424711e0
 8003468:	42470068 	.word	0x42470068
 800346c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0e7      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	4926      	ldr	r1, [pc, #152]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034aa:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	491d      	ldr	r1, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	4915      	ldr	r1, [pc, #84]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003516:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800

08003534 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e273      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00c      	beq.n	8003578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003566:	2b08      	cmp	r3, #8
 8003568:	d112      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05b      	beq.n	800363c <HAL_RCC_OscConfig+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d157      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e24e      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a75      	ldr	r2, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6c      	ldr	r2, [pc, #432]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd ff28 	bl	8001440 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd ff24 	bl	8001440 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e213      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xc0>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd ff14 	bl	8001440 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fd ff10 	bl	8001440 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ff      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0xe8>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1d3      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4937      	ldr	r1, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fd fec9 	bl	8001440 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fd fec5 	bl	8001440 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1b4      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd fea8 	bl	8001440 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fd fea4 	bl	8001440 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e193      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d036      	beq.n	800378c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fd fe88 	bl	8001440 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003734:	f7fd fe84 	bl	8001440 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e173      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x200>
 8003752:	e01b      	b.n	800378c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fe71 	bl	8001440 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	e00e      	b.n	8003780 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003762:	f7fd fe6d 	bl	8001440 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e15c      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
 800377c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b8a      	ldr	r3, [pc, #552]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ea      	bne.n	8003762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8097 	beq.w	80038c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b83      	ldr	r3, [pc, #524]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b7c      	ldr	r3, [pc, #496]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x47c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d6:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x47c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a75      	ldr	r2, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x47c>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e2:	f7fd fe2d 	bl	8001440 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fd fe29 	bl	8001440 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e118      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x47c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x2ea>
 8003810:	4b66      	ldr	r3, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x30c>
 8003826:	4b61      	ldr	r3, [pc, #388]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a60      	ldr	r2, [pc, #384]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a5d      	ldr	r2, [pc, #372]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 8003840:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
 800384c:	4b57      	ldr	r3, [pc, #348]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003852:	f023 0304 	bic.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd fdee 	bl	8001440 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fdea 	bl	8001440 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0d7      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ee      	beq.n	8003868 <HAL_RCC_OscConfig+0x334>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fd fdd8 	bl	8001440 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fd fdd4 	bl	8001440 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0c1      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	4b40      	ldr	r3, [pc, #256]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ee      	bne.n	8003894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a3a      	ldr	r2, [pc, #232]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80ad 	beq.w	8003a2c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d060      	beq.n	80039a0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d145      	bne.n	8003972 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_RCC_OscConfig+0x480>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fda8 	bl	8001440 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fda4 	bl	8001440 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e093      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	491b      	ldr	r1, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x480>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fd fd79 	bl	8001440 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fd fd75 	bl	8001440 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e064      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x41e>
 8003970:	e05c      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_OscConfig+0x480>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fd62 	bl	8001440 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd fd5e 	bl	8001440 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04d      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x44c>
 800399e:	e045      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e040      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40007000 	.word	0x40007000
 80039b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d030      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d129      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d122      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d119      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	3b01      	subs	r3, #1
 8003a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d10f      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e041      	b.n	8003ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd faa6 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f000 f9ce 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d001      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e04e      	b.n	8003b92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d01d      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_TIM_Base_Start_IT+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d010      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	e007      	b.n	8003b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40001800 	.word	0x40001800

08003bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0202 	mvn.w	r2, #2
 8003be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8ee 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8e0 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8f1 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0204 	mvn.w	r2, #4
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8c4 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8b6 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8c7 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f89a 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f88c 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f89d 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0210 	mvn.w	r2, #16
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f870 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f862 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f873 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0201 	mvn.w	r2, #1
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc ffea 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f97e 	bl	8004068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f838 	bl	8003e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f948 	bl	8004054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d027      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d023      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d017      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <TIM_Base_SetConfig+0x128>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <TIM_Base_SetConfig+0x130>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <TIM_Base_SetConfig+0x134>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <TIM_Base_SetConfig+0x138>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800
 8003f50:	40001800 	.word	0x40001800
 8003f54:	40001c00 	.word	0x40001c00
 8003f58:	40002000 	.word	0x40002000

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e05a      	b.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a21      	ldr	r2, [pc, #132]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d01d      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10c      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40010400 	.word	0x40010400
 800404c:	40014000 	.word	0x40014000
 8004050:	40001800 	.word	0x40001800

08004054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e03f      	b.n	800410e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc ffcc 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f929 	bl	8004318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08a      	sub	sp, #40	; 0x28
 800411a:	af02      	add	r7, sp, #8
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	d17c      	bne.n	8004230 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_UART_Transmit+0x2c>
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e075      	b.n	8004232 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UART_Transmit+0x3e>
 8004150:	2302      	movs	r3, #2
 8004152:	e06e      	b.n	8004232 <HAL_UART_Transmit+0x11c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416a:	f7fd f969 	bl	8001440 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004184:	d108      	bne.n	8004198 <HAL_UART_Transmit+0x82>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	e003      	b.n	80041a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041a8:	e02a      	b.n	8004200 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f840 	bl	800423a <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e036      	b.n	8004232 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3302      	adds	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e007      	b.n	80041f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1cf      	bne.n	80041aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f810 	bl	800423a <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e006      	b.n	8004232 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b090      	sub	sp, #64	; 0x40
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424a:	e050      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004252:	d04c      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0x30>
 800425a:	f7fd f8f1 	bl	8001440 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004266:	429a      	cmp	r2, r3
 8004268:	d241      	bcs.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800428a:	637a      	str	r2, [r7, #52]	; 0x34
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	613b      	str	r3, [r7, #16]
   return(result);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042be:	623a      	str	r2, [r7, #32]
 80042c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	69f9      	ldr	r1, [r7, #28]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d09f      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3740      	adds	r7, #64	; 0x40
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b0c0      	sub	sp, #256	; 0x100
 800431e:	af00      	add	r7, sp, #0
 8004320:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	ea40 0301 	orr.w	r3, r0, r1
 8004340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004370:	f021 010c 	bic.w	r1, r1, #12
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800437e:	430b      	orrs	r3, r1
 8004380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	6999      	ldr	r1, [r3, #24]
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	ea40 0301 	orr.w	r3, r0, r1
 800439e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b95      	ldr	r3, [pc, #596]	; (80045fc <UART_SetConfig+0x2e4>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d011      	beq.n	80043d0 <UART_SetConfig+0xb8>
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b93      	ldr	r3, [pc, #588]	; (8004600 <UART_SetConfig+0x2e8>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d00b      	beq.n	80043d0 <UART_SetConfig+0xb8>
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b91      	ldr	r3, [pc, #580]	; (8004604 <UART_SetConfig+0x2ec>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <UART_SetConfig+0xb8>
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b8f      	ldr	r3, [pc, #572]	; (8004608 <UART_SetConfig+0x2f0>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d104      	bne.n	80043da <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7fe fe10 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 80043d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043d8:	e003      	b.n	80043e2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043da:	f7fe fdf7 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80043de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	f040 8110 	bne.w	8004610 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	1891      	adds	r1, r2, r2
 8004408:	65b9      	str	r1, [r7, #88]	; 0x58
 800440a:	415b      	adcs	r3, r3
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800440e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004412:	4621      	mov	r1, r4
 8004414:	eb12 0801 	adds.w	r8, r2, r1
 8004418:	4629      	mov	r1, r5
 800441a:	eb43 0901 	adc.w	r9, r3, r1
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004432:	4690      	mov	r8, r2
 8004434:	4699      	mov	r9, r3
 8004436:	4623      	mov	r3, r4
 8004438:	eb18 0303 	adds.w	r3, r8, r3
 800443c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004440:	462b      	mov	r3, r5
 8004442:	eb49 0303 	adc.w	r3, r9, r3
 8004446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800445a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800445e:	460b      	mov	r3, r1
 8004460:	18db      	adds	r3, r3, r3
 8004462:	653b      	str	r3, [r7, #80]	; 0x50
 8004464:	4613      	mov	r3, r2
 8004466:	eb42 0303 	adc.w	r3, r2, r3
 800446a:	657b      	str	r3, [r7, #84]	; 0x54
 800446c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004474:	f7fb ff2c 	bl	80002d0 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4b63      	ldr	r3, [pc, #396]	; (800460c <UART_SetConfig+0x2f4>)
 800447e:	fba3 2302 	umull	r2, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	011c      	lsls	r4, r3, #4
 8004486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	1891      	adds	r1, r2, r2
 800449e:	64b9      	str	r1, [r7, #72]	; 0x48
 80044a0:	415b      	adcs	r3, r3
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044a8:	4641      	mov	r1, r8
 80044aa:	eb12 0a01 	adds.w	sl, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0b01 	adc.w	fp, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c8:	4692      	mov	sl, r2
 80044ca:	469b      	mov	fp, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	eb1a 0303 	adds.w	r3, sl, r3
 80044d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d6:	464b      	mov	r3, r9
 80044d8:	eb4b 0303 	adc.w	r3, fp, r3
 80044dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
 8004502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800450a:	f7fb fee1 	bl	80002d0 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4611      	mov	r1, r2
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <UART_SetConfig+0x2f4>)
 8004516:	fba3 2301 	umull	r2, r3, r3, r1
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2264      	movs	r2, #100	; 0x64
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	1acb      	subs	r3, r1, r3
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <UART_SetConfig+0x2f4>)
 800452c:	fba3 2302 	umull	r2, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004538:	441c      	add	r4, r3
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	63b9      	str	r1, [r7, #56]	; 0x38
 8004554:	415b      	adcs	r3, r3
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800455c:	4641      	mov	r1, r8
 800455e:	1851      	adds	r1, r2, r1
 8004560:	6339      	str	r1, [r7, #48]	; 0x30
 8004562:	4649      	mov	r1, r9
 8004564:	414b      	adcs	r3, r1
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004574:	4659      	mov	r1, fp
 8004576:	00cb      	lsls	r3, r1, #3
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457e:	4651      	mov	r1, sl
 8004580:	00ca      	lsls	r2, r1, #3
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	4603      	mov	r3, r0
 8004588:	4642      	mov	r2, r8
 800458a:	189b      	adds	r3, r3, r2
 800458c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004590:	464b      	mov	r3, r9
 8004592:	460a      	mov	r2, r1
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045b0:	460b      	mov	r3, r1
 80045b2:	18db      	adds	r3, r3, r3
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	4613      	mov	r3, r2
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045c6:	f7fb fe83 	bl	80002d0 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <UART_SetConfig+0x2f4>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2164      	movs	r1, #100	; 0x64
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	3332      	adds	r3, #50	; 0x32
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <UART_SetConfig+0x2f4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4422      	add	r2, r4
 80045f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045f8:	e109      	b.n	800480e <UART_SetConfig+0x4f6>
 80045fa:	bf00      	nop
 80045fc:	40011000 	.word	0x40011000
 8004600:	40011400 	.word	0x40011400
 8004604:	40011800 	.word	0x40011800
 8004608:	40011c00 	.word	0x40011c00
 800460c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800461a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800461e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	1891      	adds	r1, r2, r2
 8004628:	6239      	str	r1, [r7, #32]
 800462a:	415b      	adcs	r3, r3
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004632:	4641      	mov	r1, r8
 8004634:	1854      	adds	r4, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb43 0501 	adc.w	r5, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004658:	464b      	mov	r3, r9
 800465a:	eb45 0303 	adc.w	r3, r5, r3
 800465e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800466e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800467e:	4629      	mov	r1, r5
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004688:	4621      	mov	r1, r4
 800468a:	008a      	lsls	r2, r1, #2
 800468c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004690:	f7fb fe1e 	bl	80002d0 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b60      	ldr	r3, [pc, #384]	; (800481c <UART_SetConfig+0x504>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	61b9      	str	r1, [r7, #24]
 80046bc:	415b      	adcs	r3, r3
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6139      	str	r1, [r7, #16]
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046f8:	464b      	mov	r3, r9
 80046fa:	460a      	mov	r2, r1
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	67bb      	str	r3, [r7, #120]	; 0x78
 800470e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800471c:	4649      	mov	r1, r9
 800471e:	008b      	lsls	r3, r1, #2
 8004720:	4641      	mov	r1, r8
 8004722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004726:	4641      	mov	r1, r8
 8004728:	008a      	lsls	r2, r1, #2
 800472a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800472e:	f7fb fdcf 	bl	80002d0 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <UART_SetConfig+0x504>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a34      	ldr	r2, [pc, #208]	; (800481c <UART_SetConfig+0x504>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004756:	441c      	add	r4, r3
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475c:	2200      	movs	r2, #0
 800475e:	673b      	str	r3, [r7, #112]	; 0x70
 8004760:	677a      	str	r2, [r7, #116]	; 0x74
 8004762:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	1891      	adds	r1, r2, r2
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	415b      	adcs	r3, r3
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004776:	4641      	mov	r1, r8
 8004778:	1851      	adds	r1, r2, r1
 800477a:	6039      	str	r1, [r7, #0]
 800477c:	4649      	mov	r1, r9
 800477e:	414b      	adcs	r3, r1
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800478e:	4659      	mov	r1, fp
 8004790:	00cb      	lsls	r3, r1, #3
 8004792:	4651      	mov	r1, sl
 8004794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004798:	4651      	mov	r1, sl
 800479a:	00ca      	lsls	r2, r1, #3
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	4603      	mov	r3, r0
 80047a2:	4642      	mov	r2, r8
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	663b      	str	r3, [r7, #96]	; 0x60
 80047bc:	667a      	str	r2, [r7, #100]	; 0x64
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047ca:	4649      	mov	r1, r9
 80047cc:	008b      	lsls	r3, r1, #2
 80047ce:	4641      	mov	r1, r8
 80047d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d4:	4641      	mov	r1, r8
 80047d6:	008a      	lsls	r2, r1, #2
 80047d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047dc:	f7fb fd78 	bl	80002d0 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <UART_SetConfig+0x504>)
 80047e6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2164      	movs	r1, #100	; 0x64
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	3332      	adds	r3, #50	; 0x32
 80047f8:	4a08      	ldr	r2, [pc, #32]	; (800481c <UART_SetConfig+0x504>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4422      	add	r2, r4
 800480c:	609a      	str	r2, [r3, #8]
}
 800480e:	bf00      	nop
 8004810:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481a:	bf00      	nop
 800481c:	51eb851f 	.word	0x51eb851f

08004820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004820:	b084      	sub	sp, #16
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	f107 001c 	add.w	r0, r7, #28
 800482e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d122      	bne.n	800487e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800484c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa9c 	bl	8004db0 <USB_CoreReset>
 8004878:	4603      	mov	r3, r0
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	e01a      	b.n	80048b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa90 	bl	8004db0 <USB_CoreReset>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
 80048a6:	e005      	b.n	80048b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10b      	bne.n	80048d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f043 0206 	orr.w	r2, r3, #6
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048de:	b004      	add	sp, #16
 80048e0:	4770      	bx	lr

080048e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d115      	bne.n	8004952 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004932:	2001      	movs	r0, #1
 8004934:	f7fc fd90 	bl	8001458 <HAL_Delay>
      ms++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3301      	adds	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa28 	bl	8004d94 <USB_GetMode>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d01e      	beq.n	8004988 <USB_SetCurrentMode+0x84>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b31      	cmp	r3, #49	; 0x31
 800494e:	d9f0      	bls.n	8004932 <USB_SetCurrentMode+0x2e>
 8004950:	e01a      	b.n	8004988 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d115      	bne.n	8004984 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004964:	2001      	movs	r0, #1
 8004966:	f7fc fd77 	bl	8001458 <HAL_Delay>
      ms++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa0f 	bl	8004d94 <USB_GetMode>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <USB_SetCurrentMode+0x84>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b31      	cmp	r3, #49	; 0x31
 8004980:	d9f0      	bls.n	8004964 <USB_SetCurrentMode+0x60>
 8004982:	e001      	b.n	8004988 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e005      	b.n	8004994 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b32      	cmp	r3, #50	; 0x32
 800498c:	d101      	bne.n	8004992 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800499c:	b084      	sub	sp, #16
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e009      	b.n	80049d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	2200      	movs	r2, #0
 80049c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b0e      	cmp	r3, #14
 80049d4:	d9f2      	bls.n	80049bc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11c      	bne.n	8004a16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e005      	b.n	8004a22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	4619      	mov	r1, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	680b      	ldr	r3, [r1, #0]
 8004a40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10c      	bne.n	8004a62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f965 	bl	8004d20 <USB_SetDevSpeed>
 8004a56:	e008      	b.n	8004a6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a58:	2101      	movs	r1, #1
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f960 	bl	8004d20 <USB_SetDevSpeed>
 8004a60:	e003      	b.n	8004a6a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a62:	2103      	movs	r1, #3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f95b 	bl	8004d20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8f3 	bl	8004c58 <USB_FlushTxFifo>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f91f 	bl	8004cc0 <USB_FlushRxFifo>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	461a      	mov	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	e043      	b.n	8004b3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004acc:	d118      	bne.n	8004b00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e013      	b.n	8004b12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	461a      	mov	r2, r3
 8004af8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e008      	b.n	8004b12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2300      	movs	r3, #0
 8004b22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d3b7      	bcc.n	8004ab6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	e043      	b.n	8004bd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b62:	d118      	bne.n	8004b96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	461a      	mov	r2, r3
 8004b78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e013      	b.n	8004ba8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e008      	b.n	8004ba8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d3b7      	bcc.n	8004b4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f043 0210 	orr.w	r2, r3, #16
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <USB_DevInit+0x2b8>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f043 0208 	orr.w	r2, r3, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	803c3800 	.word	0x803c3800

08004c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <USB_FlushTxFifo+0x64>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e01b      	b.n	8004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	daf2      	bge.n	8004c66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <USB_FlushTxFifo+0x64>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e006      	b.n	8004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d0f0      	beq.n	8004c90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	00030d40 	.word	0x00030d40

08004cc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <USB_FlushRxFifo+0x5c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e018      	b.n	8004d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	daf2      	bge.n	8004ccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2210      	movs	r2, #16
 8004cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <USB_FlushRxFifo+0x5c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e006      	b.n	8004d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d0f0      	beq.n	8004cf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	00030d40 	.word	0x00030d40

08004d20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d6c:	f023 0303 	bic.w	r3, r3, #3
 8004d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0301 	and.w	r3, r3, #1
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <USB_CoreReset+0x64>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e01b      	b.n	8004e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	daf2      	bge.n	8004dbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <USB_CoreReset+0x64>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e006      	b.n	8004e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d0f0      	beq.n	8004de6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	00030d40 	.word	0x00030d40

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000024 	.word	0x20000024

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4d0d      	ldr	r5, [pc, #52]	; (8004e5c <__libc_init_array+0x38>)
 8004e28:	4c0d      	ldr	r4, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	2600      	movs	r6, #0
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	4d0b      	ldr	r5, [pc, #44]	; (8004e64 <__libc_init_array+0x40>)
 8004e36:	4c0c      	ldr	r4, [pc, #48]	; (8004e68 <__libc_init_array+0x44>)
 8004e38:	f000 fc8e 	bl	8005758 <_init>
 8004e3c:	1b64      	subs	r4, r4, r5
 8004e3e:	10a4      	asrs	r4, r4, #2
 8004e40:	2600      	movs	r6, #0
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	08005814 	.word	0x08005814
 8004e60:	08005814 	.word	0x08005814
 8004e64:	08005814 	.word	0x08005814
 8004e68:	08005818 	.word	0x08005818

08004e6c <memset>:
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d100      	bne.n	8004e76 <memset+0xa>
 8004e74:	4770      	bx	lr
 8004e76:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7a:	e7f9      	b.n	8004e70 <memset+0x4>

08004e7c <siprintf>:
 8004e7c:	b40e      	push	{r1, r2, r3}
 8004e7e:	b500      	push	{lr}
 8004e80:	b09c      	sub	sp, #112	; 0x70
 8004e82:	ab1d      	add	r3, sp, #116	; 0x74
 8004e84:	9002      	str	r0, [sp, #8]
 8004e86:	9006      	str	r0, [sp, #24]
 8004e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e8c:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <siprintf+0x38>)
 8004e8e:	9107      	str	r1, [sp, #28]
 8004e90:	9104      	str	r1, [sp, #16]
 8004e92:	4909      	ldr	r1, [pc, #36]	; (8004eb8 <siprintf+0x3c>)
 8004e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e98:	9105      	str	r1, [sp, #20]
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	a902      	add	r1, sp, #8
 8004ea0:	f000 f868 	bl	8004f74 <_svfiprintf_r>
 8004ea4:	9b02      	ldr	r3, [sp, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	b01c      	add	sp, #112	; 0x70
 8004eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb0:	b003      	add	sp, #12
 8004eb2:	4770      	bx	lr
 8004eb4:	20000024 	.word	0x20000024
 8004eb8:	ffff0208 	.word	0xffff0208

08004ebc <__ssputs_r>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	688e      	ldr	r6, [r1, #8]
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	4682      	mov	sl, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	4690      	mov	r8, r2
 8004eca:	461f      	mov	r7, r3
 8004ecc:	d838      	bhi.n	8004f40 <__ssputs_r+0x84>
 8004ece:	898a      	ldrh	r2, [r1, #12]
 8004ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed4:	d032      	beq.n	8004f3c <__ssputs_r+0x80>
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	6909      	ldr	r1, [r1, #16]
 8004eda:	eba5 0901 	sub.w	r9, r5, r1
 8004ede:	6965      	ldr	r5, [r4, #20]
 8004ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ee8:	3301      	adds	r3, #1
 8004eea:	444b      	add	r3, r9
 8004eec:	106d      	asrs	r5, r5, #1
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	bf38      	it	cc
 8004ef2:	461d      	movcc	r5, r3
 8004ef4:	0553      	lsls	r3, r2, #21
 8004ef6:	d531      	bpl.n	8004f5c <__ssputs_r+0xa0>
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f000 fb63 	bl	80055c4 <_malloc_r>
 8004efe:	4606      	mov	r6, r0
 8004f00:	b950      	cbnz	r0, 8004f18 <__ssputs_r+0x5c>
 8004f02:	230c      	movs	r3, #12
 8004f04:	f8ca 3000 	str.w	r3, [sl]
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	6921      	ldr	r1, [r4, #16]
 8004f1a:	464a      	mov	r2, r9
 8004f1c:	f000 fabe 	bl	800549c <memcpy>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	6126      	str	r6, [r4, #16]
 8004f2e:	6165      	str	r5, [r4, #20]
 8004f30:	444e      	add	r6, r9
 8004f32:	eba5 0509 	sub.w	r5, r5, r9
 8004f36:	6026      	str	r6, [r4, #0]
 8004f38:	60a5      	str	r5, [r4, #8]
 8004f3a:	463e      	mov	r6, r7
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	d900      	bls.n	8004f42 <__ssputs_r+0x86>
 8004f40:	463e      	mov	r6, r7
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	4632      	mov	r2, r6
 8004f46:	4641      	mov	r1, r8
 8004f48:	f000 fab6 	bl	80054b8 <memmove>
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	1b9b      	subs	r3, r3, r6
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	4433      	add	r3, r6
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	2000      	movs	r0, #0
 8004f5a:	e7db      	b.n	8004f14 <__ssputs_r+0x58>
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	f000 fba5 	bl	80056ac <_realloc_r>
 8004f62:	4606      	mov	r6, r0
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d1e1      	bne.n	8004f2c <__ssputs_r+0x70>
 8004f68:	6921      	ldr	r1, [r4, #16]
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	f000 fabe 	bl	80054ec <_free_r>
 8004f70:	e7c7      	b.n	8004f02 <__ssputs_r+0x46>
	...

08004f74 <_svfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	4698      	mov	r8, r3
 8004f7a:	898b      	ldrh	r3, [r1, #12]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	b09d      	sub	sp, #116	; 0x74
 8004f80:	4607      	mov	r7, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	d50e      	bpl.n	8004fa6 <_svfiprintf_r+0x32>
 8004f88:	690b      	ldr	r3, [r1, #16]
 8004f8a:	b963      	cbnz	r3, 8004fa6 <_svfiprintf_r+0x32>
 8004f8c:	2140      	movs	r1, #64	; 0x40
 8004f8e:	f000 fb19 	bl	80055c4 <_malloc_r>
 8004f92:	6028      	str	r0, [r5, #0]
 8004f94:	6128      	str	r0, [r5, #16]
 8004f96:	b920      	cbnz	r0, 8004fa2 <_svfiprintf_r+0x2e>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa0:	e0d1      	b.n	8005146 <_svfiprintf_r+0x1d2>
 8004fa2:	2340      	movs	r3, #64	; 0x40
 8004fa4:	616b      	str	r3, [r5, #20]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	2320      	movs	r3, #32
 8004fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb4:	2330      	movs	r3, #48	; 0x30
 8004fb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005160 <_svfiprintf_r+0x1ec>
 8004fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fbe:	f04f 0901 	mov.w	r9, #1
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fca:	b10a      	cbz	r2, 8004fd0 <_svfiprintf_r+0x5c>
 8004fcc:	2a25      	cmp	r2, #37	; 0x25
 8004fce:	d1f9      	bne.n	8004fc4 <_svfiprintf_r+0x50>
 8004fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd4:	d00b      	beq.n	8004fee <_svfiprintf_r+0x7a>
 8004fd6:	465b      	mov	r3, fp
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f7ff ff6d 	bl	8004ebc <__ssputs_r>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f000 80aa 	beq.w	800513c <_svfiprintf_r+0x1c8>
 8004fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fea:	445a      	add	r2, fp
 8004fec:	9209      	str	r2, [sp, #36]	; 0x24
 8004fee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80a2 	beq.w	800513c <_svfiprintf_r+0x1c8>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005002:	f10a 0a01 	add.w	sl, sl, #1
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	9307      	str	r3, [sp, #28]
 800500a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500e:	931a      	str	r3, [sp, #104]	; 0x68
 8005010:	4654      	mov	r4, sl
 8005012:	2205      	movs	r2, #5
 8005014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005018:	4851      	ldr	r0, [pc, #324]	; (8005160 <_svfiprintf_r+0x1ec>)
 800501a:	f7fb f909 	bl	8000230 <memchr>
 800501e:	9a04      	ldr	r2, [sp, #16]
 8005020:	b9d8      	cbnz	r0, 800505a <_svfiprintf_r+0xe6>
 8005022:	06d0      	lsls	r0, r2, #27
 8005024:	bf44      	itt	mi
 8005026:	2320      	movmi	r3, #32
 8005028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800502c:	0711      	lsls	r1, r2, #28
 800502e:	bf44      	itt	mi
 8005030:	232b      	movmi	r3, #43	; 0x2b
 8005032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005036:	f89a 3000 	ldrb.w	r3, [sl]
 800503a:	2b2a      	cmp	r3, #42	; 0x2a
 800503c:	d015      	beq.n	800506a <_svfiprintf_r+0xf6>
 800503e:	9a07      	ldr	r2, [sp, #28]
 8005040:	4654      	mov	r4, sl
 8005042:	2000      	movs	r0, #0
 8005044:	f04f 0c0a 	mov.w	ip, #10
 8005048:	4621      	mov	r1, r4
 800504a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504e:	3b30      	subs	r3, #48	; 0x30
 8005050:	2b09      	cmp	r3, #9
 8005052:	d94e      	bls.n	80050f2 <_svfiprintf_r+0x17e>
 8005054:	b1b0      	cbz	r0, 8005084 <_svfiprintf_r+0x110>
 8005056:	9207      	str	r2, [sp, #28]
 8005058:	e014      	b.n	8005084 <_svfiprintf_r+0x110>
 800505a:	eba0 0308 	sub.w	r3, r0, r8
 800505e:	fa09 f303 	lsl.w	r3, r9, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	46a2      	mov	sl, r4
 8005068:	e7d2      	b.n	8005010 <_svfiprintf_r+0x9c>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	1d19      	adds	r1, r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	9103      	str	r1, [sp, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfbb      	ittet	lt
 8005076:	425b      	neglt	r3, r3
 8005078:	f042 0202 	orrlt.w	r2, r2, #2
 800507c:	9307      	strge	r3, [sp, #28]
 800507e:	9307      	strlt	r3, [sp, #28]
 8005080:	bfb8      	it	lt
 8005082:	9204      	strlt	r2, [sp, #16]
 8005084:	7823      	ldrb	r3, [r4, #0]
 8005086:	2b2e      	cmp	r3, #46	; 0x2e
 8005088:	d10c      	bne.n	80050a4 <_svfiprintf_r+0x130>
 800508a:	7863      	ldrb	r3, [r4, #1]
 800508c:	2b2a      	cmp	r3, #42	; 0x2a
 800508e:	d135      	bne.n	80050fc <_svfiprintf_r+0x188>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	9203      	str	r2, [sp, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	bfb8      	it	lt
 800509c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050a0:	3402      	adds	r4, #2
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005170 <_svfiprintf_r+0x1fc>
 80050a8:	7821      	ldrb	r1, [r4, #0]
 80050aa:	2203      	movs	r2, #3
 80050ac:	4650      	mov	r0, sl
 80050ae:	f7fb f8bf 	bl	8000230 <memchr>
 80050b2:	b140      	cbz	r0, 80050c6 <_svfiprintf_r+0x152>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	eba0 000a 	sub.w	r0, r0, sl
 80050ba:	fa03 f000 	lsl.w	r0, r3, r0
 80050be:	9b04      	ldr	r3, [sp, #16]
 80050c0:	4303      	orrs	r3, r0
 80050c2:	3401      	adds	r4, #1
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ca:	4826      	ldr	r0, [pc, #152]	; (8005164 <_svfiprintf_r+0x1f0>)
 80050cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050d0:	2206      	movs	r2, #6
 80050d2:	f7fb f8ad 	bl	8000230 <memchr>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d038      	beq.n	800514c <_svfiprintf_r+0x1d8>
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <_svfiprintf_r+0x1f4>)
 80050dc:	bb1b      	cbnz	r3, 8005126 <_svfiprintf_r+0x1b2>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	3307      	adds	r3, #7
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	3308      	adds	r3, #8
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ec:	4433      	add	r3, r6
 80050ee:	9309      	str	r3, [sp, #36]	; 0x24
 80050f0:	e767      	b.n	8004fc2 <_svfiprintf_r+0x4e>
 80050f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f6:	460c      	mov	r4, r1
 80050f8:	2001      	movs	r0, #1
 80050fa:	e7a5      	b.n	8005048 <_svfiprintf_r+0xd4>
 80050fc:	2300      	movs	r3, #0
 80050fe:	3401      	adds	r4, #1
 8005100:	9305      	str	r3, [sp, #20]
 8005102:	4619      	mov	r1, r3
 8005104:	f04f 0c0a 	mov.w	ip, #10
 8005108:	4620      	mov	r0, r4
 800510a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510e:	3a30      	subs	r2, #48	; 0x30
 8005110:	2a09      	cmp	r2, #9
 8005112:	d903      	bls.n	800511c <_svfiprintf_r+0x1a8>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0c5      	beq.n	80050a4 <_svfiprintf_r+0x130>
 8005118:	9105      	str	r1, [sp, #20]
 800511a:	e7c3      	b.n	80050a4 <_svfiprintf_r+0x130>
 800511c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005120:	4604      	mov	r4, r0
 8005122:	2301      	movs	r3, #1
 8005124:	e7f0      	b.n	8005108 <_svfiprintf_r+0x194>
 8005126:	ab03      	add	r3, sp, #12
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	462a      	mov	r2, r5
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <_svfiprintf_r+0x1f8>)
 800512e:	a904      	add	r1, sp, #16
 8005130:	4638      	mov	r0, r7
 8005132:	f3af 8000 	nop.w
 8005136:	1c42      	adds	r2, r0, #1
 8005138:	4606      	mov	r6, r0
 800513a:	d1d6      	bne.n	80050ea <_svfiprintf_r+0x176>
 800513c:	89ab      	ldrh	r3, [r5, #12]
 800513e:	065b      	lsls	r3, r3, #25
 8005140:	f53f af2c 	bmi.w	8004f9c <_svfiprintf_r+0x28>
 8005144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005146:	b01d      	add	sp, #116	; 0x74
 8005148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514c:	ab03      	add	r3, sp, #12
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	462a      	mov	r2, r5
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <_svfiprintf_r+0x1f8>)
 8005154:	a904      	add	r1, sp, #16
 8005156:	4638      	mov	r0, r7
 8005158:	f000 f87a 	bl	8005250 <_printf_i>
 800515c:	e7eb      	b.n	8005136 <_svfiprintf_r+0x1c2>
 800515e:	bf00      	nop
 8005160:	080057d8 	.word	0x080057d8
 8005164:	080057e2 	.word	0x080057e2
 8005168:	00000000 	.word	0x00000000
 800516c:	08004ebd 	.word	0x08004ebd
 8005170:	080057de 	.word	0x080057de

08005174 <_printf_common>:
 8005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	4616      	mov	r6, r2
 800517a:	4699      	mov	r9, r3
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	690b      	ldr	r3, [r1, #16]
 8005180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005184:	4293      	cmp	r3, r2
 8005186:	bfb8      	it	lt
 8005188:	4613      	movlt	r3, r2
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005190:	4607      	mov	r7, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b10a      	cbz	r2, 800519a <_printf_common+0x26>
 8005196:	3301      	adds	r3, #1
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	0699      	lsls	r1, r3, #26
 800519e:	bf42      	ittt	mi
 80051a0:	6833      	ldrmi	r3, [r6, #0]
 80051a2:	3302      	addmi	r3, #2
 80051a4:	6033      	strmi	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	f015 0506 	ands.w	r5, r5, #6
 80051ac:	d106      	bne.n	80051bc <_printf_common+0x48>
 80051ae:	f104 0a19 	add.w	sl, r4, #25
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dc26      	bgt.n	800520a <_printf_common+0x96>
 80051bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c0:	1e13      	subs	r3, r2, #0
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	bf18      	it	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d42b      	bmi.n	8005224 <_printf_common+0xb0>
 80051cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d0:	4649      	mov	r1, r9
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	3001      	adds	r0, #1
 80051d8:	d01e      	beq.n	8005218 <_printf_common+0xa4>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	68e5      	ldr	r5, [r4, #12]
 80051de:	6832      	ldr	r2, [r6, #0]
 80051e0:	f003 0306 	and.w	r3, r3, #6
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	bf08      	it	eq
 80051e8:	1aad      	subeq	r5, r5, r2
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	bf0c      	ite	eq
 80051f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f4:	2500      	movne	r5, #0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bfc4      	itt	gt
 80051fa:	1a9b      	subgt	r3, r3, r2
 80051fc:	18ed      	addgt	r5, r5, r3
 80051fe:	2600      	movs	r6, #0
 8005200:	341a      	adds	r4, #26
 8005202:	42b5      	cmp	r5, r6
 8005204:	d11a      	bne.n	800523c <_printf_common+0xc8>
 8005206:	2000      	movs	r0, #0
 8005208:	e008      	b.n	800521c <_printf_common+0xa8>
 800520a:	2301      	movs	r3, #1
 800520c:	4652      	mov	r2, sl
 800520e:	4649      	mov	r1, r9
 8005210:	4638      	mov	r0, r7
 8005212:	47c0      	blx	r8
 8005214:	3001      	adds	r0, #1
 8005216:	d103      	bne.n	8005220 <_printf_common+0xac>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	3501      	adds	r5, #1
 8005222:	e7c6      	b.n	80051b2 <_printf_common+0x3e>
 8005224:	18e1      	adds	r1, r4, r3
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	2030      	movs	r0, #48	; 0x30
 800522a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522e:	4422      	add	r2, r4
 8005230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005238:	3302      	adds	r3, #2
 800523a:	e7c7      	b.n	80051cc <_printf_common+0x58>
 800523c:	2301      	movs	r3, #1
 800523e:	4622      	mov	r2, r4
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d0e6      	beq.n	8005218 <_printf_common+0xa4>
 800524a:	3601      	adds	r6, #1
 800524c:	e7d9      	b.n	8005202 <_printf_common+0x8e>
	...

08005250 <_printf_i>:
 8005250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	7e0f      	ldrb	r7, [r1, #24]
 8005256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005258:	2f78      	cmp	r7, #120	; 0x78
 800525a:	4691      	mov	r9, r2
 800525c:	4680      	mov	r8, r0
 800525e:	460c      	mov	r4, r1
 8005260:	469a      	mov	sl, r3
 8005262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005266:	d807      	bhi.n	8005278 <_printf_i+0x28>
 8005268:	2f62      	cmp	r7, #98	; 0x62
 800526a:	d80a      	bhi.n	8005282 <_printf_i+0x32>
 800526c:	2f00      	cmp	r7, #0
 800526e:	f000 80d8 	beq.w	8005422 <_printf_i+0x1d2>
 8005272:	2f58      	cmp	r7, #88	; 0x58
 8005274:	f000 80a3 	beq.w	80053be <_printf_i+0x16e>
 8005278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800527c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005280:	e03a      	b.n	80052f8 <_printf_i+0xa8>
 8005282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005286:	2b15      	cmp	r3, #21
 8005288:	d8f6      	bhi.n	8005278 <_printf_i+0x28>
 800528a:	a101      	add	r1, pc, #4	; (adr r1, 8005290 <_printf_i+0x40>)
 800528c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005290:	080052e9 	.word	0x080052e9
 8005294:	080052fd 	.word	0x080052fd
 8005298:	08005279 	.word	0x08005279
 800529c:	08005279 	.word	0x08005279
 80052a0:	08005279 	.word	0x08005279
 80052a4:	08005279 	.word	0x08005279
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	08005279 	.word	0x08005279
 80052b0:	08005279 	.word	0x08005279
 80052b4:	08005279 	.word	0x08005279
 80052b8:	08005279 	.word	0x08005279
 80052bc:	08005409 	.word	0x08005409
 80052c0:	0800532d 	.word	0x0800532d
 80052c4:	080053eb 	.word	0x080053eb
 80052c8:	08005279 	.word	0x08005279
 80052cc:	08005279 	.word	0x08005279
 80052d0:	0800542b 	.word	0x0800542b
 80052d4:	08005279 	.word	0x08005279
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	08005279 	.word	0x08005279
 80052e0:	08005279 	.word	0x08005279
 80052e4:	080053f3 	.word	0x080053f3
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	602a      	str	r2, [r5, #0]
 80052f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0a3      	b.n	8005444 <_printf_i+0x1f4>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	0606      	lsls	r6, r0, #24
 8005302:	f101 0304 	add.w	r3, r1, #4
 8005306:	d50a      	bpl.n	800531e <_printf_i+0xce>
 8005308:	680e      	ldr	r6, [r1, #0]
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	2e00      	cmp	r6, #0
 800530e:	da03      	bge.n	8005318 <_printf_i+0xc8>
 8005310:	232d      	movs	r3, #45	; 0x2d
 8005312:	4276      	negs	r6, r6
 8005314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005318:	485e      	ldr	r0, [pc, #376]	; (8005494 <_printf_i+0x244>)
 800531a:	230a      	movs	r3, #10
 800531c:	e019      	b.n	8005352 <_printf_i+0x102>
 800531e:	680e      	ldr	r6, [r1, #0]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005326:	bf18      	it	ne
 8005328:	b236      	sxthne	r6, r6
 800532a:	e7ef      	b.n	800530c <_printf_i+0xbc>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6029      	str	r1, [r5, #0]
 8005334:	0601      	lsls	r1, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xec>
 8005338:	681e      	ldr	r6, [r3, #0]
 800533a:	e002      	b.n	8005342 <_printf_i+0xf2>
 800533c:	0646      	lsls	r6, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xe8>
 8005340:	881e      	ldrh	r6, [r3, #0]
 8005342:	4854      	ldr	r0, [pc, #336]	; (8005494 <_printf_i+0x244>)
 8005344:	2f6f      	cmp	r7, #111	; 0x6f
 8005346:	bf0c      	ite	eq
 8005348:	2308      	moveq	r3, #8
 800534a:	230a      	movne	r3, #10
 800534c:	2100      	movs	r1, #0
 800534e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005352:	6865      	ldr	r5, [r4, #4]
 8005354:	60a5      	str	r5, [r4, #8]
 8005356:	2d00      	cmp	r5, #0
 8005358:	bfa2      	ittt	ge
 800535a:	6821      	ldrge	r1, [r4, #0]
 800535c:	f021 0104 	bicge.w	r1, r1, #4
 8005360:	6021      	strge	r1, [r4, #0]
 8005362:	b90e      	cbnz	r6, 8005368 <_printf_i+0x118>
 8005364:	2d00      	cmp	r5, #0
 8005366:	d04d      	beq.n	8005404 <_printf_i+0x1b4>
 8005368:	4615      	mov	r5, r2
 800536a:	fbb6 f1f3 	udiv	r1, r6, r3
 800536e:	fb03 6711 	mls	r7, r3, r1, r6
 8005372:	5dc7      	ldrb	r7, [r0, r7]
 8005374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005378:	4637      	mov	r7, r6
 800537a:	42bb      	cmp	r3, r7
 800537c:	460e      	mov	r6, r1
 800537e:	d9f4      	bls.n	800536a <_printf_i+0x11a>
 8005380:	2b08      	cmp	r3, #8
 8005382:	d10b      	bne.n	800539c <_printf_i+0x14c>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07de      	lsls	r6, r3, #31
 8005388:	d508      	bpl.n	800539c <_printf_i+0x14c>
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	4299      	cmp	r1, r3
 8005390:	bfde      	ittt	le
 8005392:	2330      	movle	r3, #48	; 0x30
 8005394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800539c:	1b52      	subs	r2, r2, r5
 800539e:	6122      	str	r2, [r4, #16]
 80053a0:	f8cd a000 	str.w	sl, [sp]
 80053a4:	464b      	mov	r3, r9
 80053a6:	aa03      	add	r2, sp, #12
 80053a8:	4621      	mov	r1, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fee2 	bl	8005174 <_printf_common>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d14c      	bne.n	800544e <_printf_i+0x1fe>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b8:	b004      	add	sp, #16
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	4835      	ldr	r0, [pc, #212]	; (8005494 <_printf_i+0x244>)
 80053c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c4:	6829      	ldr	r1, [r5, #0]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053cc:	6029      	str	r1, [r5, #0]
 80053ce:	061d      	lsls	r5, r3, #24
 80053d0:	d514      	bpl.n	80053fc <_printf_i+0x1ac>
 80053d2:	07df      	lsls	r7, r3, #31
 80053d4:	bf44      	itt	mi
 80053d6:	f043 0320 	orrmi.w	r3, r3, #32
 80053da:	6023      	strmi	r3, [r4, #0]
 80053dc:	b91e      	cbnz	r6, 80053e6 <_printf_i+0x196>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f023 0320 	bic.w	r3, r3, #32
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	2310      	movs	r3, #16
 80053e8:	e7b0      	b.n	800534c <_printf_i+0xfc>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f043 0320 	orr.w	r3, r3, #32
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	2378      	movs	r3, #120	; 0x78
 80053f4:	4828      	ldr	r0, [pc, #160]	; (8005498 <_printf_i+0x248>)
 80053f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fa:	e7e3      	b.n	80053c4 <_printf_i+0x174>
 80053fc:	0659      	lsls	r1, r3, #25
 80053fe:	bf48      	it	mi
 8005400:	b2b6      	uxthmi	r6, r6
 8005402:	e7e6      	b.n	80053d2 <_printf_i+0x182>
 8005404:	4615      	mov	r5, r2
 8005406:	e7bb      	b.n	8005380 <_printf_i+0x130>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6826      	ldr	r6, [r4, #0]
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	1d18      	adds	r0, r3, #4
 8005410:	6028      	str	r0, [r5, #0]
 8005412:	0635      	lsls	r5, r6, #24
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	d501      	bpl.n	800541c <_printf_i+0x1cc>
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0x1d2>
 800541c:	0670      	lsls	r0, r6, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0x1c8>
 8005420:	8019      	strh	r1, [r3, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	4615      	mov	r5, r2
 8005428:	e7ba      	b.n	80053a0 <_printf_i+0x150>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	2100      	movs	r1, #0
 8005436:	4628      	mov	r0, r5
 8005438:	f7fa fefa 	bl	8000230 <memchr>
 800543c:	b108      	cbz	r0, 8005442 <_printf_i+0x1f2>
 800543e:	1b40      	subs	r0, r0, r5
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	2300      	movs	r3, #0
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	e7a8      	b.n	80053a0 <_printf_i+0x150>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	462a      	mov	r2, r5
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d0ab      	beq.n	80053b4 <_printf_i+0x164>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	d413      	bmi.n	800548a <_printf_i+0x23a>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e7a4      	b.n	80053b8 <_printf_i+0x168>
 800546e:	2301      	movs	r3, #1
 8005470:	4632      	mov	r2, r6
 8005472:	4649      	mov	r1, r9
 8005474:	4640      	mov	r0, r8
 8005476:	47d0      	blx	sl
 8005478:	3001      	adds	r0, #1
 800547a:	d09b      	beq.n	80053b4 <_printf_i+0x164>
 800547c:	3501      	adds	r5, #1
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	9903      	ldr	r1, [sp, #12]
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	42ab      	cmp	r3, r5
 8005486:	dcf2      	bgt.n	800546e <_printf_i+0x21e>
 8005488:	e7eb      	b.n	8005462 <_printf_i+0x212>
 800548a:	2500      	movs	r5, #0
 800548c:	f104 0619 	add.w	r6, r4, #25
 8005490:	e7f5      	b.n	800547e <_printf_i+0x22e>
 8005492:	bf00      	nop
 8005494:	080057e9 	.word	0x080057e9
 8005498:	080057fa 	.word	0x080057fa

0800549c <memcpy>:
 800549c:	440a      	add	r2, r1
 800549e:	4291      	cmp	r1, r2
 80054a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054a4:	d100      	bne.n	80054a8 <memcpy+0xc>
 80054a6:	4770      	bx	lr
 80054a8:	b510      	push	{r4, lr}
 80054aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b2:	4291      	cmp	r1, r2
 80054b4:	d1f9      	bne.n	80054aa <memcpy+0xe>
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <memmove>:
 80054b8:	4288      	cmp	r0, r1
 80054ba:	b510      	push	{r4, lr}
 80054bc:	eb01 0402 	add.w	r4, r1, r2
 80054c0:	d902      	bls.n	80054c8 <memmove+0x10>
 80054c2:	4284      	cmp	r4, r0
 80054c4:	4623      	mov	r3, r4
 80054c6:	d807      	bhi.n	80054d8 <memmove+0x20>
 80054c8:	1e43      	subs	r3, r0, #1
 80054ca:	42a1      	cmp	r1, r4
 80054cc:	d008      	beq.n	80054e0 <memmove+0x28>
 80054ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054d6:	e7f8      	b.n	80054ca <memmove+0x12>
 80054d8:	4402      	add	r2, r0
 80054da:	4601      	mov	r1, r0
 80054dc:	428a      	cmp	r2, r1
 80054de:	d100      	bne.n	80054e2 <memmove+0x2a>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ea:	e7f7      	b.n	80054dc <memmove+0x24>

080054ec <_free_r>:
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d044      	beq.n	800557c <_free_r+0x90>
 80054f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f6:	9001      	str	r0, [sp, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f1a1 0404 	sub.w	r4, r1, #4
 80054fe:	bfb8      	it	lt
 8005500:	18e4      	addlt	r4, r4, r3
 8005502:	f000 f913 	bl	800572c <__malloc_lock>
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <_free_r+0x94>)
 8005508:	9801      	ldr	r0, [sp, #4]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x30>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005518:	f000 b90e 	b.w	8005738 <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x46>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1949      	addeq	r1, r1, r5
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x22>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x50>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x46>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1855      	adds	r5, r2, r1
 8005540:	42a5      	cmp	r5, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x70>
 8005544:	6824      	ldr	r4, [r4, #0]
 8005546:	4421      	add	r1, r4
 8005548:	1854      	adds	r4, r2, r1
 800554a:	42a3      	cmp	r3, r4
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x26>
 8005550:	681c      	ldr	r4, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4421      	add	r1, r4
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x26>
 800555c:	d902      	bls.n	8005564 <_free_r+0x78>
 800555e:	230c      	movs	r3, #12
 8005560:	6003      	str	r3, [r0, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x26>
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	1961      	adds	r1, r4, r5
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1949      	addeq	r1, r1, r5
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x26>
 800557c:	b003      	add	sp, #12
 800557e:	bd30      	pop	{r4, r5, pc}
 8005580:	200007b8 	.word	0x200007b8

08005584 <sbrk_aligned>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4e0e      	ldr	r6, [pc, #56]	; (80055c0 <sbrk_aligned+0x3c>)
 8005588:	460c      	mov	r4, r1
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	b911      	cbnz	r1, 8005596 <sbrk_aligned+0x12>
 8005590:	f000 f8bc 	bl	800570c <_sbrk_r>
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f8b7 	bl	800570c <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d00a      	beq.n	80055b8 <sbrk_aligned+0x34>
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d007      	beq.n	80055bc <sbrk_aligned+0x38>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f8ac 	bl	800570c <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d101      	bne.n	80055bc <sbrk_aligned+0x38>
 80055b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055bc:	4620      	mov	r0, r4
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	200007bc 	.word	0x200007bc

080055c4 <_malloc_r>:
 80055c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	f025 0503 	bic.w	r5, r5, #3
 80055ce:	3508      	adds	r5, #8
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	bf38      	it	cc
 80055d4:	250c      	movcc	r5, #12
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	4607      	mov	r7, r0
 80055da:	db01      	blt.n	80055e0 <_malloc_r+0x1c>
 80055dc:	42a9      	cmp	r1, r5
 80055de:	d905      	bls.n	80055ec <_malloc_r+0x28>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	2600      	movs	r6, #0
 80055e6:	4630      	mov	r0, r6
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	4e2e      	ldr	r6, [pc, #184]	; (80056a8 <_malloc_r+0xe4>)
 80055ee:	f000 f89d 	bl	800572c <__malloc_lock>
 80055f2:	6833      	ldr	r3, [r6, #0]
 80055f4:	461c      	mov	r4, r3
 80055f6:	bb34      	cbnz	r4, 8005646 <_malloc_r+0x82>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ffc2 	bl	8005584 <sbrk_aligned>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	4604      	mov	r4, r0
 8005604:	d14d      	bne.n	80056a2 <_malloc_r+0xde>
 8005606:	6834      	ldr	r4, [r6, #0]
 8005608:	4626      	mov	r6, r4
 800560a:	2e00      	cmp	r6, #0
 800560c:	d140      	bne.n	8005690 <_malloc_r+0xcc>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4631      	mov	r1, r6
 8005612:	4638      	mov	r0, r7
 8005614:	eb04 0803 	add.w	r8, r4, r3
 8005618:	f000 f878 	bl	800570c <_sbrk_r>
 800561c:	4580      	cmp	r8, r0
 800561e:	d13a      	bne.n	8005696 <_malloc_r+0xd2>
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	3503      	adds	r5, #3
 8005624:	1a6d      	subs	r5, r5, r1
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ffa5 	bl	8005584 <sbrk_aligned>
 800563a:	3001      	adds	r0, #1
 800563c:	d02b      	beq.n	8005696 <_malloc_r+0xd2>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	442b      	add	r3, r5
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	e00e      	b.n	8005664 <_malloc_r+0xa0>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	1b52      	subs	r2, r2, r5
 800564a:	d41e      	bmi.n	800568a <_malloc_r+0xc6>
 800564c:	2a0b      	cmp	r2, #11
 800564e:	d916      	bls.n	800567e <_malloc_r+0xba>
 8005650:	1961      	adds	r1, r4, r5
 8005652:	42a3      	cmp	r3, r4
 8005654:	6025      	str	r5, [r4, #0]
 8005656:	bf18      	it	ne
 8005658:	6059      	strne	r1, [r3, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	bf08      	it	eq
 800565e:	6031      	streq	r1, [r6, #0]
 8005660:	5162      	str	r2, [r4, r5]
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	4638      	mov	r0, r7
 8005666:	f104 060b 	add.w	r6, r4, #11
 800566a:	f000 f865 	bl	8005738 <__malloc_unlock>
 800566e:	f026 0607 	bic.w	r6, r6, #7
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	1af2      	subs	r2, r6, r3
 8005676:	d0b6      	beq.n	80055e6 <_malloc_r+0x22>
 8005678:	1b9b      	subs	r3, r3, r6
 800567a:	50a3      	str	r3, [r4, r2]
 800567c:	e7b3      	b.n	80055e6 <_malloc_r+0x22>
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	bf0c      	ite	eq
 8005684:	6032      	streq	r2, [r6, #0]
 8005686:	605a      	strne	r2, [r3, #4]
 8005688:	e7ec      	b.n	8005664 <_malloc_r+0xa0>
 800568a:	4623      	mov	r3, r4
 800568c:	6864      	ldr	r4, [r4, #4]
 800568e:	e7b2      	b.n	80055f6 <_malloc_r+0x32>
 8005690:	4634      	mov	r4, r6
 8005692:	6876      	ldr	r6, [r6, #4]
 8005694:	e7b9      	b.n	800560a <_malloc_r+0x46>
 8005696:	230c      	movs	r3, #12
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4638      	mov	r0, r7
 800569c:	f000 f84c 	bl	8005738 <__malloc_unlock>
 80056a0:	e7a1      	b.n	80055e6 <_malloc_r+0x22>
 80056a2:	6025      	str	r5, [r4, #0]
 80056a4:	e7de      	b.n	8005664 <_malloc_r+0xa0>
 80056a6:	bf00      	nop
 80056a8:	200007b8 	.word	0x200007b8

080056ac <_realloc_r>:
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	4680      	mov	r8, r0
 80056b2:	4614      	mov	r4, r2
 80056b4:	460e      	mov	r6, r1
 80056b6:	b921      	cbnz	r1, 80056c2 <_realloc_r+0x16>
 80056b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4611      	mov	r1, r2
 80056be:	f7ff bf81 	b.w	80055c4 <_malloc_r>
 80056c2:	b92a      	cbnz	r2, 80056d0 <_realloc_r+0x24>
 80056c4:	f7ff ff12 	bl	80054ec <_free_r>
 80056c8:	4625      	mov	r5, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d0:	f000 f838 	bl	8005744 <_malloc_usable_size_r>
 80056d4:	4284      	cmp	r4, r0
 80056d6:	4607      	mov	r7, r0
 80056d8:	d802      	bhi.n	80056e0 <_realloc_r+0x34>
 80056da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056de:	d812      	bhi.n	8005706 <_realloc_r+0x5a>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff ff6e 	bl	80055c4 <_malloc_r>
 80056e8:	4605      	mov	r5, r0
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0ed      	beq.n	80056ca <_realloc_r+0x1e>
 80056ee:	42bc      	cmp	r4, r7
 80056f0:	4622      	mov	r2, r4
 80056f2:	4631      	mov	r1, r6
 80056f4:	bf28      	it	cs
 80056f6:	463a      	movcs	r2, r7
 80056f8:	f7ff fed0 	bl	800549c <memcpy>
 80056fc:	4631      	mov	r1, r6
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fef4 	bl	80054ec <_free_r>
 8005704:	e7e1      	b.n	80056ca <_realloc_r+0x1e>
 8005706:	4635      	mov	r5, r6
 8005708:	e7df      	b.n	80056ca <_realloc_r+0x1e>
	...

0800570c <_sbrk_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d06      	ldr	r5, [pc, #24]	; (8005728 <_sbrk_r+0x1c>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fb fdba 	bl	8001290 <_sbrk>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_sbrk_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_sbrk_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	200007c0 	.word	0x200007c0

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__malloc_lock+0x8>)
 800572e:	f000 b811 	b.w	8005754 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	200007c4 	.word	0x200007c4

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__malloc_unlock+0x8>)
 800573a:	f000 b80c 	b.w	8005756 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	200007c4 	.word	0x200007c4

08005744 <_malloc_usable_size_r>:
 8005744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005748:	1f18      	subs	r0, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfbc      	itt	lt
 800574e:	580b      	ldrlt	r3, [r1, r0]
 8005750:	18c0      	addlt	r0, r0, r3
 8005752:	4770      	bx	lr

08005754 <__retarget_lock_acquire_recursive>:
 8005754:	4770      	bx	lr

08005756 <__retarget_lock_release_recursive>:
 8005756:	4770      	bx	lr

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
